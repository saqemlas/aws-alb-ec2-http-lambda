service: hybrid

variablesResolutionMode: 20210326

plugins:
  - serverless-esbuild
  - serverless-s3-cleaner
  - serverless-iam-roles-per-function
  - serverless-scriptable-plugin

package:
  individually: true
  patterns:
    - 'src/lambda/**'
    - '!src/ec2/**'
    - '!node_modules/**'
    - '!.serverless/**'

custom:
  baseName: ${self:service}-${self:provider.stage}
  ec2CodeBucket: ${self:custom.baseName}-ec2-bucket

  esbuild:
    target: node14
    packager: yarn
    minify: true
    sourcemap: true
  
  serverless-s3-cleaner:
    buckets:
      - ${self:custom.ec2CodeBucket}
      - ${cf:${self:custom.baseName}.ServerlessDeploymentBucketName, ''}

  serverless-iam-roles-per-function:
    defaultInherit: true

  scriptable:
    hooks:
      aws:deploy:deploy:createStack: 
        - yarn run upload:ec2:code --region ${self:provider.region} --bucket ${self:custom.ec2CodeBucket}
      after:remove:remove:
        - yarn run remove:ec2:bucket ${self:custom.ec2CodeBucket}


provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.baseName}
  deploymentBucket:
    blockPublicAccess: true
  runtime: nodejs14.x
  memorySize: 128
  timeout: 25
  versionFunctions: false
  logRetentionInDays: 7
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: "--enable-source-maps"
  iam:
    role:
      name: ${self:custom.baseName}-provider
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 
            - !Sub arn:aws:logs:${self:provider.region}:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*
            - !Sub arn:aws:logs:${self:provider.region}:${AWS::AccountId}:log-group:/aws/ec2/*:log-stream:*

functions:
  Lambda:
    name: ${self:custom.baseName}-lambda
    handler: services/lambda/src/index.handler
    events:
      - alb:
          listenerArn: !Ref albListener
          priority: 1
          conditions:
            path: /lambda
          # healthCheck:
          #   path: /health
          #   intervalSeconds: 35
          #   timeoutSeconds: 30
          #   healthyThresholdCount: 2
          #   unhealthyThresholdCount: 2
          #   matcher:
          #     httpCode: 200,201


resources:
  - ${file(./infra/alb.yml)}
  - ${file(./infra/vpc.yml)}
  - ${file(./infra/ec2.yml)}
